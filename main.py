import config
import database
import globals
import karma

import asyncio
import datetime
import logging
import re
import telebot.async_telebot
import string


logging.basicConfig(level=logging.INFO, filename="epta_logi.log",filemode="a",
                    format="%(asctime)s %(levelname)s %(message)s", encoding='utf-8')

bot = telebot.async_telebot.AsyncTeleBot(config.BOT_TOKEN)


async def get_message_reply_user(message):
    user = None
    if not message.reply_to_message.text:
        return
    if message.reply_to_message:
        user = message.reply_to_message.from_user
        if message.reply_to_message.from_user.is_bot:
            return None
        return user
    
    
@bot.message_handler(chat_types=['private'], commands=['start'])
async def start(message):
    await bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, —è –ì–æ–¥–µ—Ç—Ç–∞, —Ä–∞–±–æ—Ç–∞—é –ø–æ–∫–∞ —á—Ç–æ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ, –ª–∏—á–∫—É –Ω–µ –ª—é–±–ª—é...')
    

@bot.message_handler(chat_types=['supergroup',], commands=['help'])
async def help_message(message):
    await bot.reply_to(message, f'–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤:\n/warn - –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—é. –ù–∞ —á–µ—Ç–≤–µ—Ä—Ç–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å—Ç–∞–≤–ª—é –º—É—Ç.\n/mute [days=int|None]- –∑–∞–º—É—Ç–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.\n/unmute - –ø–æ–º–∏–ª–æ–≤–∞—Ç—å –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è.\n/ban - –ø—Ä–æ—Å—Ç–æ –±–∞–Ω.\n\n–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö:\n/stats - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, –æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n/help - —Å–ø—Ä–æ—Å–∏—Ç—å —É –º–µ–Ω—è, —á—Ç–æ —è —É–º–µ—é.\n–¢–∞–∫–∂–µ —è —É–º–µ—é —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –≤–∞—à–∏ —Ä–µ–∞–∫—Ü–∏–∏, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å –∫–∞—Ä–º—É –¥—Ä—É–≥–∏–º. –†–∞–±–æ—Ç–∞–µ—Ç —ç—Ç–æ —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–ø–∏–∫–∞—Ö Showcase –∏ –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã.\n–ü–æ–≤—ã—Å–∏—Ç—å –∫–∞—Ä–º—É –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é üëç, ‚ù§, üî•.\n–ü–æ–Ω–∏–∑–∏—Ç—å –∫–∞—Ä–º—É –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é üëé, üí©, ü§°.')


@bot.message_handler(chat_types=['supergroup',], content_types=['new_chat_members'])
async def welcome_message(message):
    await bot.delete_message(message.chat.id, message.id)
    
    # add user to database.
    karma.check_user_in_database(message.from_user)
    
    # greeting message.
    try:
        # TODO: get greeting message id to delete this shit after time.
        # delete_message() with timeout agrument does not work. mb stupid me idk.
        greeting_text = f"""–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, [{message.from_user.first_name}](tg://user?id={message.from_user.id})\!
                        \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å [–ø—Ä–∞–≤–∏–ª–∞–º–∏](https://t.me/godot_help_ru/35/36)\."""
        await bot.send_message(message.chat.id,
                                message_thread_id=globals.THREADS.get('GREETING_THREAD'),
                                text=greeting_text,
                                parse_mode='MarkdownV2',
                                link_preview_options=telebot.types.LinkPreviewOptions(False))
    except Exception as exception:
        logging.exception(exception)
        await bot.send_message(message.chat.id,
                               message_thread_id=globals.THREADS.get('GREETING_THREAD'),
                               text="–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!")
        

@bot.message_handler(chat_types=['supergroup',], content_types=['left_chat_member'])
async def clear_leave_message(message):
    await bot.delete_message(message.chat.id, message.id)
    
    
@bot.message_handler(chat_types=['supergroup'], commands=['mute'])
async def mute_user(message):
    admins = await bot.get_chat_administrators(message.chat.id)
    admins_id = [id.user.id for id in admins]
    if message.from_user.id in admins_id:
        if message.reply_to_message.from_user.id in admins_id:
            await bot.reply_to(message, '–ì–æ—Å–ø–æ–¥–∞ –∞–¥–º–∏–Ω—ã, –ø—Ä–æ—à—É –≤—ã—è—Å–Ω—è—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.')
            return
        mute_after = re.findall(r'\d+', message.text)
        if mute_after:
            days = mute_after[0]
            mute_after = datetime.datetime.now() + datetime.timedelta(days=int(mute_after[0]))
        else:
            mute_after = None
        await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, mute_after)
        await bot.reply_to(message, f'–ù—è\-–Ω—è—è, –æ–∫–µ–π, [{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id}), —Ç—ã —Ç–µ–ø–µ—Ä—å –≤ –º—É—Ç–µ –Ω–∞ {days + " –¥–Ω–µ–π" if days else "–ù–ê–í–°–ï–ì–î–ê"}\.',
                           parse_mode='MarkdownV2')
        
        
@bot.message_handler(chat_types=['supergroup'], commands=['warn'])
async def warn_user(message):
    admins = await bot.get_chat_administrators(message.chat.id)
    admins_id = [id.user.id for id in admins]
    if message.from_user.id in admins_id:
        if message.reply_to_message.from_user.id in admins_id:
            await bot.reply_to(message, '–ì–æ—Å–ø–æ–¥–∞ –∞–¥–º–∏–Ω—ã, –ø—Ä–æ—à—É –≤—ã—è—Å–Ω—è—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.')
            return
        result = database.give_warn(message.reply_to_message.from_user)
        if result == 'err':
            await bot.reply_to(message, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —á–µ–∫–Ω–∏ –ª–æ–≥–∏.')
        elif result == 'muted':
            await bot.reply_to(message, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.full_name} ({karma.get_user_karma(message.reply_to_message.from_user)}) –ø–æ–ª—É—á–∏–ª –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.\n–¢–µ–ø–µ—Ä—å –ø–æ—Å–∏–¥–∏—Ç –≤ –º–æ–ª—á–∞–Ω–∫–µ.')
            await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id,
                                           None, False, False, False, False, False, False,
                                           False, False)
        else:
            await bot.reply_to(message, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.full_name} ({karma.get_user_karma(message.reply_to_message.from_user)}) –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.\n–°–µ–π—á–∞—Å –∏—Ö {database.get_warns_count(message.reply_to_message.from_user)}. –ö–æ–≥–¥–∞ –∏—Ö –±—É–¥–µ—Ç 4 - —è –≤—ã–¥–∞–º —Ç–µ–±–µ –º—É—Ç.')
        

@bot.message_handler(chat_types=['supergroup'], commands=['unmute'])
async def unmute_user(message):
    admins = await bot.get_chat_administrators(message.chat.id)
    admins_id = [id.user.id for id in admins]
    if message.from_user.id in admins_id:
        if message.reply_to_message.from_user.id in admins_id:
            await bot.reply_to(message, '–ì–æ—Å–ø–æ–¥–∞ –∞–¥–º–∏–Ω—ã, –ø—Ä–æ—à—É –≤—ã—è—Å–Ω—è—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.')
            return
        database.clear_warns(message.reply_to_message.from_user)
        await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, None,
                                       True, True, True, True)
        await bot.reply_to(message, f'–¢–∞–∫ –∏ –±—ã—Ç—å, –≤—ã—Ö–æ–¥–∏ –∏–∑ –º–æ–ª—á–∞–Ω–∫–∏, [{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id})\.',
                           parse_mode='MarkdownV2')
        
        
@bot.message_handler(chat_types=['supergroup'], commands=['ban'])
async def ban_user(message):
    admins = await bot.get_chat_administrators(message.chat.id)
    admins_id = [id.user.id for id in admins]
    if message.from_user.id in admins_id:
        if message.reply_to_message.from_user.id in admins_id:
            await bot.reply_to(message, '–ì–æ—Å–ø–æ–¥–∞ –∞–¥–º–∏–Ω—ã, –ø—Ä–æ—à—É –≤—ã—è—Å–Ω—è—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.')
            return
        await bot.ban_chat_member(message.chat.id, message.reply_to_message.from_user.id)
        await bot.reply_to(message, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.full_name} —Ç–µ–ø–µ—Ä—å –∑–∞–±–∞–Ω–µ–Ω. –ú—ã –Ω–µ –∂–∞–ª–µ–µ–º.')
        logging.info(f'User {message.reply_to_message.from_user.full_name} ({message.reply_to_message.from_user.username}) got banned.')        


@bot.message_handler(chat_types=['supergroup'], commands=['stats'])
async def get_user_stats(message):
    user = await get_message_reply_user(message)
    user = message.from_user if not user else user
    await bot.reply_to(message, f'–ö–∞—Ä–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.full_name} —Å–µ–π—á–∞—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {karma.get_user_karma(user)}.\n–ü–æ–≤—ã—à–∞–ª –¥—Ä—É–≥–∏–º –∫–∞—Ä–º—É {karma.get_increase_times(user)} —Ä–∞–∑(–∞).\n–ü–æ–Ω–∏–∂–∞–ª –¥—Ä—É–≥–∏–º –∫–∞—Ä–º—É {karma.get_decrease_times(user)} —Ä–∞–∑(–∞).')


@bot.message_reaction_handler()
async def get_reaction(message_reaction_updated):
    if message.chat.id != config.CHAT_ID:
        return 
    if not message_reaction_updated.new_reaction:
        return
    if message_reaction_updated.new_reaction[0].emoji in globals.KARMA_THANKS_EMOJI:
        temp_message = await bot.send_message(message_reaction_updated.chat.id, '—ã', reply_to_message_id=message_reaction_updated.message_id, message_thread_id=1365)
        await bot.delete_message(temp_message.chat.id, temp_message.id)
        if temp_message.reply_to_message.message_thread_id != globals.THREADS['SHOWCASE_THREAD'] or globals.THREADS['MATERIALS_THREAD']:
            return
        if temp_message.reply_to_message.from_user.id == message_reaction_updated.user.id:
            return
        karma.check_user_in_database(temp_message.reply_to_message.from_user)
        karma.check_user_in_database(message_reaction_updated.user)
        karma.change_user_karma(temp_message.reply_to_message.from_user, message_reaction_updated.user)
        
    if message_reaction_updated.new_reaction[0].emoji in globals.KARMA_CONDEMNATION_EMOJI:
        temp_message = await bot.send_message(message_reaction_updated.chat.id, '—ã', reply_to_message_id=message_reaction_updated.message_id, message_thread_id=1)
        await bot.delete_message(temp_message.chat.id, temp_message.id)
        if temp_message.reply_to_message.message_thread_id != globals.THREADS['SHOWCASE_THREAD'] or globals.THREADS['MATERIALS_THREAD']:
            return
        if temp_message.reply_to_message.from_user.id == message_reaction_updated.user.id:
            return
        karma.check_user_in_database(temp_message.reply_to_message.from_user)
        karma.check_user_in_database(message_reaction_updated.user)
        karma.change_user_karma(temp_message.reply_to_message.from_user, message_reaction_updated.user, -1)
        

@bot.message_handler(chat_types=['supergroup'], func=lambda message: True)
async def listen_to_karma(message):
    # govnokod starts here.
    if message.chat.id != config.CHAT_ID:
        return
    if message.reply_to_message.forum_topic_created:
        return
    if message.text.lower().startswith(globals.KARMA_THANKS):
        if message.reply_to_message.from_user.is_bot:
            await bot.reply_to(message, "–£ –º–µ–Ω—è –æ—Ç–æ–±—Ä–∞–ª–∏ –∫–∞—Ä–º—É... –ú–Ω–µ –µ–µ –Ω–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å.")
            return
        if message.from_user.id == message.reply_to_message.from_user.id:
            await bot.reply_to(message, '–Ø –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç—ã —Å–∞–º–æ–≤–ª—é–±–ª–µ–Ω–Ω—ã–π –¥—É—Ä–∞–∫, –Ω–æ –Ω–µ –Ω—É–∂–Ω–æ —ç—Ç–æ–≥–æ.')
            return
        karma.check_user_in_database(message.from_user)
        karma.check_user_in_database(message.reply_to_message.from_user)
        karma.change_user_karma(message.reply_to_message.from_user, message.from_user)
        await bot.reply_to(message, f'{message.from_user.first_name} ({karma.get_user_karma(message.from_user)}) –ø–æ–≤—ã—Å–∏–ª –∫–∞—Ä–º—É {message.reply_to_message.from_user.first_name} ({karma.get_user_karma(message.reply_to_message.from_user)}).')
    elif message.text.lower().startswith(globals.KARMA_CONDEMNATION):
        if message.reply_to_message.from_user.is_bot:
            await bot.reply_to(message, "–£ –º–µ–Ω—è –æ—Ç–æ–±—Ä–∞–ª–∏ –∫–∞—Ä–º—É... –ú–Ω–µ –µ–µ –Ω–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å.")
            return
        if message.from_user.id == message.reply_to_message.from_user.id:
            await bot.reply_to(message, '–Ø –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç—ã —Å–∞–º–æ–∫—Ä–∏—Ç–∏—á–Ω—ã–π –¥—É—Ä–∞–∫, –Ω–æ –Ω–µ –Ω—É–∂–Ω–æ —ç—Ç–æ–≥–æ.')
            return
        karma.check_user_in_database(message.from_user)
        karma.check_user_in_database(message.reply_to_message.from_user)
        karma.change_user_karma(message.reply_to_message.from_user, message.from_user, -1)
        await bot.reply_to(message, f'{message.from_user.first_name} ({karma.get_user_karma(message.from_user)}) –ø–æ–Ω–∏–∑–∏–ª –∫–∞—Ä–º—É {message.reply_to_message.from_user.first_name} ({karma.get_user_karma(message.reply_to_message.from_user)}).')


if __name__ == '__main__':
    asyncio.run(bot.infinity_polling(allowed_updates=['message_reaction', 'message', 'chat_member']))
    
